services:
  # 1. Core Infrastructure: Zookeeper, Kafka, PostgreSQL
  zookeeper:
    image: zookeeper:3.9.1
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      disable: true

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tracking_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d tracking_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_CREATE_TOPICS=events:1:1
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10

  # 2. Data Ingestion & Processing Services

  real-time-events-collector:
    build:
      context: ./services/real-time-events-collector
    container_name: real-time-events-collector
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_URL=kafka:9092

  real-time-events-processor:
    build:
      context: ./services/real-time-events-processor
    container_name: real-time-events-processor
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_TOPIC=user-tracking-events
    restart: unless-stopped

  # 3. Frontend Application
  real-time-user-tracker-demo:
    build:
      context: ./services/real-time-user-tracker-demo
    container_name: real-time-user-tracker-demo
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on: # Depends on the collector to send events
      - real-time-events-collector

  # 4. Developer Tooling
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  data:
  postgres_data:
