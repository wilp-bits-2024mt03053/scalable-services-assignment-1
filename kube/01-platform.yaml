# ==========================================================
# 01-platform.yaml
# Core platform services for Minikube: Zookeeper, Kafka, PostgreSQL
# ==========================================================

# --- Namespace ---
apiVersion: v1
kind: Namespace
metadata:
  name: scalable-services
---
# --- Zookeeper Service & StatefulSet ---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: scalable-services
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: scalable-services
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.0.1
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: '2181'
            - name: ZOOKEEPER_TICK_TIME
              value: '2000'
          readinessProbe:
            tcpSocket:
              port: 2181
            initialDelaySeconds: 5
            periodSeconds: 10
---
# --- Kafka Service & StatefulSet ---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: scalable-services
spec:
  type: NodePort
  selector:
    app: kafka
  ports:
    - name: internal
      port: 9092
      targetPort: 9092
    - name: external
      port: 9094
      targetPort: 9094
      nodePort: 30092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: scalable-services
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      enableServiceLinks: false
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.0.1
          ports:
            - containerPort: 9092
            - containerPort: 9094
          env:
            - name: KAFKA_BROKER_ID
              value: '1'
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: 'zookeeper:2181'
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: 'PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT'
            - name: KAFKA_LISTENERS
              value: 'PLAINTEXT://:9092,EXTERNAL://:9094'
            - name: MINIKUBE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # Kafka will get the actual Minikube IP substituted by your script via envsubst
            - name: KAFKA_ADVERTISED_LISTENERS
              value: 'PLAINTEXT://kafka.scalable-services.svc.cluster.local:9092,EXTERNAL://$MINIKUBE_IP:30092'
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: 'PLAINTEXT'
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: '1'
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: '0'
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 10
            periodSeconds: 10
---
# --- PostgreSQL Secret, Service & StatefulSet ---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: scalable-services
type: Opaque
stringData:
  POSTGRES_USER: 'user'
  POSTGRES_PASSWORD: 'password'
  POSTGRES_DB: 'tracking_db'
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: scalable-services
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: scalable-services
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secret
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB'
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 5
