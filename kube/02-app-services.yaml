# ==========================================================
# 02-app-services.yaml
# Backend application services + Adminer DB UI
# Compatible with Minikube + Kafka external/internal setup
# ==========================================================

# --- Event Collector Service ---
apiVersion: v1
kind: Service
metadata:
  name: events-collector
  namespace: scalable-services
spec:
  selector:
    app: events-collector
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-collector
  namespace: scalable-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: events-collector
  template:
    metadata:
      labels:
        app: events-collector
    spec:
      containers:
        - name: events-collector
          image: real-time-events-collector:latest
          imagePullPolicy: Never # Change to IfNotPresent if using Docker Hub
          ports:
            - containerPort: 8000
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: 'kafka.scalable-services.svc.cluster.local:9092'
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 15
---
# --- Event Processor Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-processor
  namespace: scalable-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: events-processor
  template:
    metadata:
      labels:
        app: events-processor
    spec:
      containers:
        - name: events-processor
          image: real-time-events-processor:latest
          imagePullPolicy: Never
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: 'kafka.scalable-services.svc.cluster.local:9092'
            - name: POSTGRES_HOST
              value: 'postgres'
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - 'pg_isready -h postgres -p 5432 -U $POSTGRES_USER'
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - 'pg_isready -h postgres -p 5432 -U $POSTGRES_USER'
            initialDelaySeconds: 300
            periodSeconds: 30
---
# --- Events API Service ---
apiVersion: v1
kind: Service
metadata:
  name: events-api
  namespace: scalable-services
spec:
  type: NodePort
  selector:
    app: events-api
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
      nodePort: 30081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-api
  namespace: scalable-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: events-api
  template:
    metadata:
      labels:
        app: events-api
    spec:
      containers:
        - name: events-api
          image: real-time-events-service:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 8001
          env:
            - name: POSTGRES_HOST
              value: 'postgres'
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
          readinessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 10
            periodSeconds: 20
---
# --- Adminer (Database UI) ---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: scalable-services
spec:
  type: NodePort
  selector:
    app: adminer
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: scalable-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
        - name: adminer
          image: adminer:latest
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 20
---
# --- HPA for App Services ---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: events-collector-hpa
  namespace: scalable-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: events-collector
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: events-processor-hpa
  namespace: scalable-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: events-processor
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: events-api-hpa
  namespace: scalable-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: events-api
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
